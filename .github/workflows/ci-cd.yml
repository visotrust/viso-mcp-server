name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Check code formatting
        run: ./gradlew spotlessCheck

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Extract version from release tag
        if: github.event_name == 'release'
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      - name: Update Gradle version
        if: github.event_name == 'release'
        run: |
          sed -i "s/version = '.*'/version = '${{ env.VERSION }}'/g" build.gradle
          echo "Updated build.gradle version to ${{ env.VERSION }}"

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}  # Skip this step when running with Act
        with:
          name: jar-file
          path: build/libs/*.jar
          retention-days: 1

  publish:
    name: Publish Artifacts
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        if: ${{ !env.ACT }}  # Skip this step when running with Act
        with:
          name: jar-file
          path: build/libs

      - name: Extract version from release tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      - name: Upload JAR to GitHub Release
        uses: actions/upload-release-asset@v1
        if: ${{ !env.ACT }}  # Skip this step when running with Act
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/libs/viso-mcp-server-${{ env.VERSION }}.jar
          asset_name: viso-mcp-server-${{ env.VERSION }}.jar
          asset_content_type: application/java-archive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: |
            VERSION=${{ env.VERSION }}
          tags: |
            visotrustai/viso-mcp-server:latest
            visotrustai/viso-mcp-server:${{ github.event.release.tag_name }}
